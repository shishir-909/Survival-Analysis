dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2)
master_table <- master_table %>%
dplyr::mutate(expctd_events = ((Y.i1/Y.i)*(d.i)))
master_table <- master_table %>%
dplyr::mutate(difference = (d.i1 - expctd_events)) %>%
dplyr::mutate(variance = (Y.i1/Y.i)*(1-(Y.i1/Y.i))*((Y.i-d.i)/(Y.i-1))*d.i)
chi_squared.statistic <- ((sum(master_table$difference)**2))/(sum(master_table$variance))
p_value <- 1 - pchisq(chi_squared.statistic,1)
coxmd <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'breslow')
summary(coxmd)
coxmd <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'discrete')
coxmd <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'exact')
coxmd <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'efron')
summary(coxmd)
ten_survMisc <- survMisc::ten(fit)
View(ten_survMisc)
# Chunk 1: setup
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2
circuitPack <- read_csv("Data/CircuitPack05.csv")
circuitPack <- circuitPack %>%
dplyr::mutate(Status = case_when(`Censoring Indicator` == "Failure" ~ 1, `Censoring Indicator` == "Censored" ~ 0)) %>%
dplyr::rename(Vendor = `Vendor Number`)
#str(circuitPack)
#Build Kaplan Meir curve for the 2 vendors
fit <- survival::survfit(
survival::Surv(time = Days, event = Status, type = 'right') ~ Vendor,
data = circuitPack,
weights = Count,
conf.type = "log",
conf.int = 0.95
)
summary(fit, digits = 2)
#plot(fit, ylim = c(0.97,1))
ggsurvplot(fit, data = circuitPack, risk.table = T, ylim = c(0.97,1), conf.int = T)
#Log rank test with weight = 1
survival::survdiff(survival::Surv(time = Days, event = Status, type = 'right') ~ Vendor, data = circuitPack,rho = 0) ##rho = 0 gives log rank test
t.i <- sort(unique(circuitPack$Days[which(circuitPack$Status == 1)]))
fit_1 <- survival::survfit(
survival::Surv(
time = circuitPack$Days[which(circuitPack$Vendor == "Vendor1")]
,
event = circuitPack$Status[which(circuitPack$Vendor == "Vendor1")]
,
type = "right"
) ~ 1 #Right hand formula for a single curve. It will use Turnbull iterative process for datasets containing left and right censored data.
,
stype = 1 #Survival type 1 means direct estimate of survival curve. Type 2 would have been exp(-H(t))
,
ctype = 1 #Cumulative Hazard type 1 is Nelson-Aalen. Type 2 is Fleming-Harrington correction for tied events.
,
data = circuitPack,
weights = Count[which(circuitPack$Vendor == "Vendor1")],
conf.type = "log",
conf.int = 0.95
)
summary_fit1 <- summary(fit_1)
group1 <- data.frame(Time = summary_fit1$time,
Events = summary_fit1$n.event,
At_risk = summary_fit1$n.risk)
fit_2 <- survival::survfit(
survival::Surv(
time = circuitPack$Days[which(circuitPack$Vendor == "Vendor2")]
,
event = circuitPack$Status[which(circuitPack$Vendor == "Vendor2")]
,
type = "right"
) ~ 1 #Right hand formula for a single curve. It will use Turnbull iterative process for datasets containing left and right censored data.
,
stype = 1 #Survival type 1 means direct estimate of survival curve. Type 2 would have been exp(-H(t))
,
ctype = 1 #Cumulative Hazard type 1 is Nelson-Aalen. Type 2 is Fleming-Harrington correction for tied events.
,
data = circuitPack,
weights = Count[which(circuitPack$Vendor == "Vendor2")],
conf.type = "log",
conf.int = 0.95
)
summary_fit2 <- summary(fit_2)
t.i <- sort(unique(c(summary_fit1$time, summary_fit2$time)))
d.i1 <- summary(fit_1, times = t.i)$n.event
Y.i1 <- summary(fit_1, times = t.i)$n.risk
d.i2 <- summary(fit_2, times = t.i)$n.event
Y.i2 <- summary(fit_2, times = t.i)$n.risk
master_table <- data.frame(t.i = t.i,
Y.i1 = Y.i1,
d.i1 = d.i1,
Y.i2 = Y.i2,
d.i2 = d.i2)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2)
master_table <- master_table %>%
dplyr::mutate(expctd_events = ((Y.i1/Y.i)*(d.i)))
master_table <- master_table %>%
dplyr::mutate(difference = (d.i1 - expctd_events)) %>%
dplyr::mutate(variance = (Y.i1/Y.i)*(1-(Y.i1/Y.i))*((Y.i-d.i)/(Y.i-1))*d.i)
chi_squared.statistic <- ((sum(master_table$difference)**2))/(sum(master_table$variance))
p_value <- 1 - pchisq(chi_squared.statistic,1)
cox_fit <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'efron')
summary(cox_fit)
View(circuitPack)
fit_pooled <- survival::survfit(
survival::Surv(time = Days, event = Status, type = 'right') ~ 1,
data = circuitPack,
weights = Count,
conf.type = "log",
conf.int = 0.95
)
summary(fit_pooled, digits = 2)
summary_fit_pooled <- summary(fit_pooled, digits = 2)
summary_fit_pooled <- summary(fit_pooled, digits = 2)
pooled_df <- data.frame(t.i_pooled = summary_fit_pooled$time, t.i_surv_pooled = summary_fit_pooled$surv)
View(pooled_df)
t.i_surv_pooled_minus <- c(1,pooled_df$t.i_surv_pooled)
head(t.i_surv_pooled_minus,-1)
remove(t.i_surv_pooled_minus)
pooled_df <- data.frame(t.i_pooled = summary_fit_pooled$time, t.i_surv_pooled = summary_fit_pooled$surv) %>% dplyr::mutate(surv_pooled_minus = head(c(1,t.i_surv_pooled),-1))
View(master_table)
master_table <- master_table %>% dplyr::inner_join(pooled_df, by=c(t.i=t.i_pooled))
master_table <- master_table %>% dplyr::inner_join(pooled_df, by = join_by(t.i == t.i_pooled))
View(circuitPack)
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*(1-surv_pooled_minus)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
p_value_FH <- 1 - pchisq(chi_squared.statistic,1)
p_value_FH
(sum(master_table$difference_weighted)
sum(master_table$difference_weighted)
sum(master_table$difference)
sum(master_table$difference)
sum(master_table$difference_weighted)
chi_squared.statistic_FH
p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1)
p_value_FH
chi_squared.statistic
sum(master_table$difference)
chi_squared.statistic_FH
sum(master_table$difference_weighted)
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*(surv_pooled_minus)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1)
p_value_FH
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*(1-surv_pooled_minus)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1)
p_value_FH
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**2)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1)
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**1))/(sum(master_table$variance))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**1)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
# Chunk 1: setup
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
survival::survdiff(survival::Surv(time = Days, event = Status, type = 'right') ~ Vendor, data = circuitPack,rho = 0) ##rho = 0 gives log rank test
circuitPack <- read_csv("Data/CircuitPack05.csv")
circuitPack <- circuitPack %>%
dplyr::mutate(Status = case_when(`Censoring Indicator` == "Failure" ~ 1, `Censoring Indicator` == "Censored" ~ 0)) %>%
dplyr::rename(Vendor = `Vendor Number`)
fit <- survival::survfit(
survival::Surv(time = Days, event = Status, type = 'right') ~ Vendor,
data = circuitPack,
weights = Count,
conf.type = "log",
conf.int = 0.95
)
summary(fit, digits = 2)
ggsurvplot(fit, data = circuitPack, risk.table = T, ylim = c(0.97,1), conf.int = T)
survival::survdiff(survival::Surv(time = Days, event = Status, type = 'right') ~ Vendor, data = circuitPack,rho = 0) ##rho = 0 gives log rank test
survival::survdiff(fit, data = circuitPack,rho = 0) ##rho = 0 gives log rank test
cox_fit <- survival::coxph(survival::Surv(time = Days, event = Status) ~ Vendor, data = circuitPack, weights = Count, ties = 'efron')
summary(cox_fit)
snubber <- read_csv("Data/Snubber.csv")
View(snubber)
snubber <- snubber %>%
dplyr::mutate(Status = case_when(`Censoring Indicator` == "Failure" ~ 1, `Censoring Indicator` == "Censored" ~ 0)) %>%
dplyr::rename(Vendor = `Vendor Number`)
remove(snubber)
snubber <- read_csv("Data/Snubber.csv")
snubber <- snubber %>%
dplyr::mutate(Status = case_when(`Censoring Indicator` == "Failure" ~ 1, `Censoring Indicator` == "Censored" ~ 0))
snubber <- snubber %>%
dplyr::mutate(Status = case_when(`Censoring Indicator` == "Failure" ~ 1, `Censoring Indicator` == "Censored" ~ 0)) %>% dplyr::rename(Cycles = `Toaster Cycles`)
fit <- survival::survfit(
survival::Surv(time = Cycles, event = Status, type = 'right') ~ Design,
data = snubber,
weights = Count,
conf.type = "log",
conf.int = 0.95
)
summary(fit, digits = 2)
ggsurvplot(fit, data = snubber, risk.table = T, conf.int = T)
survival::survdiff(survival::Surv(time = Days, event = Status, type = 'right') ~ Design, data = snubber,rho = 0) ##rho = 0 gives log rank test
survival::survdiff(survival::Surv(time = Cycles, event = Status, type = 'right') ~ Design, data = snubber,rho = 0) ##rho = 0 gives log rank test
t.i <- sort(unique(snubber$Cycles[which(snubber$Status == 1)]))
fit_1 <- survival::survfit(
survival::Surv(
time = snubber$Cycles[which(snubber$Design == "Old")]
,
event = snubber$Status[which(snubber$Design == "Old")]
,
type = "right"
) ~ 1 #Right hand formula for a single curve. It will use Turnbull iterative process for datasets containing left and right censored data.
,
stype = 1 #Survival type 1 means direct estimate of survival curve. Type 2 would have been exp(-H(t))
,
ctype = 1 #Cumulative Hazard type 1 is Nelson-Aalen. Type 2 is Fleming-Harrington correction for tied events.
,
data = snubber,
weights = Count[which(snubber$Design == "Old")],
conf.type = "log",
conf.int = 0.95
)
summary_fit1 <- summary(fit_1)
group1 <- data.frame(Time = summary_fit1$time,
Events = summary_fit1$n.event,
At_risk = summary_fit1$n.risk)
fit_2 <- survival::survfit(
survival::Surv(
time = snubber$Cycles[which(snubber$Design == "New")]
,
event = snubber$Status[which(snubber$Design == "New")]
,
type = "right"
) ~ 1 #Right hand formula for a single curve. It will use Turnbull iterative process for datasets containing left and right censored data.
,
stype = 1 #Survival type 1 means direct estimate of survival curve. Type 2 would have been exp(-H(t))
,
ctype = 1 #Cumulative Hazard type 1 is Nelson-Aalen. Type 2 is Fleming-Harrington correction for tied events.
,
data = snubber,
weights = Count[which(snubber$Design == "New")],
conf.type = "log",
conf.int = 0.95
)
summary_fit2 <- summary(fit_2)
t.i <- sort(unique(c(summary_fit1$time, summary_fit2$time)))
d.i1 <- summary(fit_1, times = t.i)$n.event
Y.i1 <- summary(fit_1, times = t.i)$n.risk
d.i2 <- summary(fit_2, times = t.i)$n.event
Y.i2 <- summary(fit_2, times = t.i)$n.risk
master_table <- data.frame(t.i = t.i,
Y.i1 = Y.i1,
d.i1 = d.i1,
Y.i2 = Y.i2,
d.i2 = d.i2)
d.i1 <- summary(fit_1, times = t.i, extend = T)$n.event
Y.i1 <- summary(fit_1, times = t.i, extend = T)$n.risk
d.i2 <- summary(fit_2, times = t.i)$n.event
Y.i2 <- summary(fit_2, times = t.i)$n.risk
master_table <- data.frame(t.i = t.i,
Y.i1 = Y.i1,
d.i1 = d.i1,
Y.i2 = Y.i2,
d.i2 = d.i2)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2) %>%
dplyr::filter(Y.i1 == 0 | Y.i2 ==0)
master_table <- data.frame(t.i = t.i,
Y.i1 = Y.i1,
d.i1 = d.i1,
Y.i2 = Y.i2,
d.i2 = d.i2)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2) %>%
dplyr::filter(Y.i1 != 0 | Y.i2 != 0)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2) %>%
dplyr::filter(Y.i1 == 0 | Y.i2 == 0)
View(master_table)
master_table <- data.frame(t.i = t.i,
Y.i1 = Y.i1,
d.i1 = d.i1,
Y.i2 = Y.i2,
d.i2 = d.i2)
master_table <- master_table %>%
dplyr::mutate(Y.i = Y.i1 + Y.i2,
d.i = d.i1 + d.i2) %>%
dplyr::filter(Y.i1 != 0 & Y.i2 != 0)
View(master_table)
master_table <- master_table %>%
dplyr::mutate(expctd_events = ((Y.i1/Y.i)*(d.i)))
master_table <- master_table %>%
dplyr::mutate(difference = (d.i1 - expctd_events)) %>%
dplyr::mutate(variance = (Y.i1/Y.i)*(1-(Y.i1/Y.i))*((Y.i-d.i)/(Y.i-1))*d.i)
chi_squared.statistic <- ((sum(master_table$difference)**2))/(sum(master_table$variance))
p_value <- 1 - pchisq(chi_squared.statistic,1)
chi_squared.statistic
p_value
survival::survdiff(survival::Surv(time = Cycles, event = Status, type = 'right') ~ Design, data = snubber,rho = 0) ##rho = 0 gives log rank test
fit_pooled <- survival::survfit(
survival::Surv(time = Cycles, event = Status, type = 'right') ~ 1,
data = snubber,
weights = Count,
conf.type = "log",
conf.int = 0.95
)
summary_fit_pooled <- summary(fit_pooled, digits = 2)
pooled_df <- data.frame(t.i_pooled = summary_fit_pooled$time, t.i_surv_pooled = summary_fit_pooled$surv) %>% dplyr::mutate(surv_pooled_minus = head(c(1,t.i_surv_pooled),-1)) #Need survival at the previous event times, as per eq 7.3.9
master_table <- master_table %>% dplyr::inner_join(pooled_df, by = join_by(t.i == t.i_pooled))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**1)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((surv_pooled_minus)**1)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((surv_pooled_minus)**1)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**3)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**0.5)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**0.025)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**0.0025)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**0.00025)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**0.000)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
master_table <- master_table %>%
dplyr::mutate(difference_weighted = (d.i1 - expctd_events)*((1-surv_pooled_minus)**1)) #Using p=0 and q =1 Fleming Harrington weights
chi_squared.statistic_FH <- ((sum(master_table$difference_weighted)**2))/(sum(master_table$variance))
(p_value_FH <- 1 - pchisq(chi_squared.statistic_FH,1))
data(reliability, package = "survival")
data("imotor")
data(reliability, package = "survival")
force(imotor)
View(imotor)
survival::survdiff(survival::Surv(time = time, event = status, type = 'right') ~ temp, data = imotor,rho = 0) ##rho = 0 gives log rank test
survival::survdiff(survival::Surv(time = time[which(temp != 150)], event = status[which(temp != 150)], type = 'right') ~ temp, data = imotor,rho = 0) ##rho = 0 gives log rank test
survival::survdiff(survival::Surv(time = time[which(temp != 150)], event = status[which(temp != 150)], type = 'right') ~ temp[which(temp != 150)], data = imotor,rho = 0) ##rho = 0 gives log rank test
force(ifluid)
View(ifluid)
force(cracks)
force(capacitor)
View(capacitor)
View(snubber)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
system2('pandoc-citeproc', '--version')
system2('pandoc-citeproc', '--version')
getwd()
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
#setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
#setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
# Chunk 1
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(KMsurv)
library(survival)
library(survMisc) ##Confidence bands not in survival package. survMisc is an extension of the survival package and contains confidence bands
library(tidyverse)
library(readxl)
library(readr)
library(survminer)
setwd("I:/My Drive/rao@ualberta.ca 2022-12-08 10 58/shishir@tamu.edu/My Drive/Interesting papers/Survival Models/GitHub/Survival/Survival-Analysis/Blog 3")
# Chunk 2: bib
# create a bib file for the R packages used in this document
knitr::write_bib(c('base', 'rmarkdown'), file = 'skeleton.bib')
system2('pandoc-citeproc', '--version')
require("SMRD")
install.packages("SMRD")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("devtools")
devtools::install_github("Auburngrads/SMRD")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Auburngrads/SMRD")
devtools::install_github("Auburngrads/SMRD")
devtools::install_github("Auburngrads/SMRD")
devtools::install_github("Auburngrads/SMRD")
require("SMRD")
require("Rsplida")
install.packages("https://wqmeeker.stat.iastate.edu/RSplida.zip")
###   Also install RSplidaSimulationResults
install.packages("https://wqmeeker.stat.iastate.edu/RSplidaSimulationResults.zip", repos=NULL)
